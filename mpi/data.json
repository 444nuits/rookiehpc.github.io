{"Type":"About","Technology":"MPI","Sections":[{"Title":"What is it?","Content":"In case you already heard about mpicc or similar, let us start on a sane basis by avoiding a common confusion; MPI is <b>NOT</b>:</p><ul><li>a compiler</li><li>a library</li><li>a framework</li><li>a programming language</ul><p>MPI, which stands for Message-Passing Interface, is a standard that defines (as its name suggests) an interface for message-passing libraries. Concretely, it is a <a href=\"https://www.mpi-forum.org/docs/mpi-3.1/mpi31-report.pdf\" alt=\"Link to the MPI standard version 3.1\">a 850-page document</a> that you can find on the website of the <a href=\"https://www.mpi-forum.org\" alt=\"Link to the MPI forum website.\">MPI forum</a>; the organisation in charge of developing the MPI standard."},{"Title":"Why did we need MPI?","Content":"Back in the 1980s, if you were to develop an application that uses message-passing, typically for distributed-memory architectures, you had to design your message-passing solution from scratch, including a message-passing interface. The result was a plethora of implementations relying on different message-passing interfaces: <a href=\"https://authors.library.caltech.edu/72880/\" alt=\"Link to paper about the Caltech Cosmic Cube.\">Caltech Cosmic Cube</a>, <a href=\"https://en.wikipedia.org/wiki/Intel_iPSC\" alt=\"Link to wikipedia page about the Intel Hypercube.\">Intel Hypercube</a>, <a href=\"https://en.wikipedia.org/wiki/Intel_Paragon\" alt=\"Link to wikipedia page about the Intel Paragon interfaces.\">Intel Paragon interfaces</a> to name a few. Consequences:</p><ul><li>As a developer: the code you developed would not be portable to another library without having to rewrite it entirely. In addition, porting your code to another library implied to learn how to use the new message-passing library considered.</li><li>As a hardware vendor: making your hardware attractive by optimising its performance for message-passing libraries was challenging since there were numerous of possible libraries to support. Moreoever, none of them was guaranteed to last, and newer ones could emerge at any time.</li></ul><p>So, companies and universities decided to team up and make the MPI Forum; an organisation that would be in charge of defining a standard message-passing interface. With such a standard:</p><ul><li>As a developer: the code you write is instantly portable to any library since they all rely on the same interface. Also, learning curve: none; you can focus on the interface and don't have to learn any library specifics.</li><li>As a hardware vendor: no matter the message-passing library used behind the scene, the interface exposed is the same. They can thus highly optimise their support for that single interface and instantly efficiently support all libraries.</li></ul><p>In 1992, the first version of the standard was released, almost 30 years later, it is still here and heavily used in more or less all HPC codes."}]}