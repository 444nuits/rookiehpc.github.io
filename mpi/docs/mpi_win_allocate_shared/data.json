{
    "Type":"Documentation",
    "Technology":"MPI",
    "Name":"MPI_Win_allocate_shared",
    "DirectoryName":"mpi_win_allocate_shared",
    "SharedDescription":true,
    "Description":"MPI_Win_allocate_shared is a variant of MPI_Win_allocate which exposes a window containing data accessible by other MPI processes via remote-memory access operations such as MPI_Put and MPI_Get. However, with MPI_Win_allocate_shared, the data exposed through the window is also accessible via direct store and load operations. Note that the user must ensure that all MPI processes in the communicator concerned in the MPI_Win_allocate_shared operation can share the memory segments created. For instance, MPI processes located on distinct nodes do not satisfy this condition. MPI_Comm_split_type can be used to find the MPI processes able to create a shared memory region in a given communicator, by passing the MPI_COMM_TYPE_SHARED split type. MPI_Win_allocate_shared is a collective operation; it must be called by all MPI processes in the communicator concerned. ",
    "Categories":[
        "Collectives",
        "One-sided"
    ],
    "Languages": [
        {
            "Language":"C",
            "Parameters": [
                {
                    "Name":"size",
                    "Description":"The size of the memory area exposed through the window, in bytes.",
                    "Type":"MPI_Aint",
                    "Optional":false
                },
                {
                    "Name":"displacement_unit",
                    "Description":"The displacement unit is used to provide an indexing feature during RMA operations. Indeed, the target displacement specified during RMA operations is multiplied by the displacement unit on that target. The displacement unit is expressed in bytes, so that it remains identical in an heterogeneous environment.",
                    "Type":"int",
                    "Optional":false
                },
                {
                    "Name":"info",
                    "Description":"The info argument provides optimisation hints to the runtime about the expected usage pattern of the window.\n- no_locks: if set to true, then the implementation may assume that passive target synchronisation (that is, MPI_Win_lock, MPI_Win_lock_all) will not be used on the given window. This implies that this window is not used for 3-party communication, and RMA can be implemented with no (less) asynchronous agent activity at this process.\n- accumulate_ordering: controls the ordering of accumulate operations at the target. The default value is rar,raw,war,waw.\n- accumulate_ops: if set to same_op, the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation. If set to same_op_no_op, then the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation or MPI_NO_OP. This can eliminate the need to protect access for certain operation types where the hardware can guarantee atomicity. The default is same_op_no_op.\n- same_size: if set to true, then the implementation may assume that the argument size is identical on all processes, and that all processes have provided this info key with the same value.\n- same_disp_unit: if set to true, then the implementation may assume that the argument displacement_unit is identical on all processes, and that all processes have provided this info key with the same value.",
                    "Type":"MPI_Info",
                    "Optional":false
                },
                {
                    "Name":"communicator",
                    "Description":"The communicator containing all MPI processes involved in RMA communications. The various processes in the corresponding group may specify completely different target windows, in location, size, displacement units and info arguments. As long as all the get, put and accumulate accesses to a particular process fit their specific target window this should pose no problem. The same area in memory may appear in multiple windows, each associated with a different window object. However, concurrent communications to distinct, overlapping windows may lead to undefined results. Also, the MPI processes in this communicator must be able to create a memory segment that can be shared with all other MPI processes in the group.",
                    "Type":"MPI_Comm",
                    "Optional":false
                },
                {
                    "Name":"base",
                    "Description":"The address of locally allocated window segment.",
                    "Type":"void*",
                    "Optional":false
                },
                {
                    "Name":"window",
                    "Description":"A pointer to the variable in which store the window created.",
                    "Type":"MPI_Win*",
                    "Optional":false
                }
            ],
            "Return":
                {
                    "Type":"int",
                    "Description":"The error code returned from the shared window creation:\n- MPI_SUCCESS: the routine successfully completed."
                }
        },
        {
            "Language":"FORTRAN-2008",
            "Parameters": [
                {
                    "Name":"size",
                    "Description":"The size of the memory area exposed through the window, in bytes.",
                    "Type":"INTEGER(KIND=MPI_ADDRESS_KIND)",
                    "Optional":false,
                    "Intent":"IN"
                },
                {
                    "Name":"displacement_unit",
                    "Description":"The displacement unit is used to provide an indexing feature during RMA operations. Indeed, the target displacement specified during RMA operations is multiplied by the displacement unit on that target. The displacement unit is expressed in bytes, so that it remains identical in an heterogeneous environment.",
                    "Type":"INTEGER",
                    "Optional":false,
                    "Intent":"IN"
                },
                {
                    "Name":"info",
                    "Description":"The info argument provides optimisation hints to the runtime about the expected usage pattern of the window.\n- no_locks: if set to true, then the implementation may assume that passive target synchronisation (that is, MPI_Win_lock, MPI_Win_lock_all) will not be used on the given window. This implies that this window is not used for 3-party communication, and RMA can be implemented with no (less) asynchronous agent activity at this process.\n- accumulate_ordering: controls the ordering of accumulate operations at the target. The default value is rar,raw,war,waw.\n- accumulate_ops: if set to same_op, the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation. If set to same_op_no_op, then the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation or MPI_NO_OP. This can eliminate the need to protect access for certain operation types where the hardware can guarantee atomicity. The default is same_op_no_op.\n- same_size: if set to true, then the implementation may assume that the argument size is identical on all processes, and that all processes have provided this info key with the same value.\n- same_disp_unit: if set to true, then the implementation may assume that the argument displacement_unit is identical on all processes, and that all processes have provided this info key with the same value.",
                    "Type":"TYPE(MPI_Info)",
                    "Optional":false,
                    "Intent":"IN"
                },
                {
                    "Name":"communicator",
                    "Description":"The communicator containing all MPI processes involved in RMA communications. The various processes in the corresponding group may specify completely different target windows, in location, size, displacement units and info arguments. As long as all the get, put and accumulate accesses to a particular process fit their specific target window this should pose no problem. The same area in memory may appear in multiple windows, each associated with a different window object. However, concurrent communications to distinct, overlapping windows may lead to undefined results. Also, the MPI processes in this communicator must be able to create a memory segment that can be shared with all other MPI processes in the group.",
                    "Type":"TYPE(MPI_Comm)",
                    "Optional":false,
                    "Intent":"IN"
                },
                {
                    "Name":"base",
                    "Description":"The address of locally allocated window segment.",
                    "Type":"TYPE(C_PTR)",
                    "Optional":false,
                    "Intent":"OUT"
                },
                {
                    "Name":"window",
                    "Description":"The variable in which store the window created.",
                    "Type":"TYPE(MPI_Win)",
                    "Optional":false,
                    "Intent":"OUT"
                },
                {
                    "Name":"ierror",
                    "Description":"The error code returned during the window creation:\n- MPI_SUCCESS: the routine successfully completed.",
                    "Type":"INTEGER",
                    "Optional":true,
                    "Intent":"OUT"
                }
            ]
        },
        {
            "Language":"FORTRAN-90",
            "Parameters": [
                {
                    "Name":"size",
                    "Description":"The size of the memory area exposed through the window, in bytes.",
                    "Type":"INTEGER(KIND=MPI_ADDRESS_KIND)",
                    "Optional":false
                },
                {
                    "Name":"displacement_unit",
                    "Description":"The displacement unit is used to provide an indexing feature during RMA operations. Indeed, the target displacement specified during RMA operations is multiplied by the displacement unit on that target. The displacement unit is expressed in bytes, so that it remains identical in an heterogeneous environment.",
                    "Type":"INTEGER",
                    "Optional":false
                },
                {
                    "Name":"info",
                    "Description":"The info argument provides optimisation hints to the runtime about the expected usage pattern of the window.\n- no_locks: if set to true, then the implementation may assume that passive target synchronisation (that is, MPI_Win_lock, MPI_Win_lock_all) will not be used on the given window. This implies that this window is not used for 3-party communication, and RMA can be implemented with no (less) asynchronous agent activity at this process.\n- accumulate_ordering: controls the ordering of accumulate operations at the target. The default value is rar,raw,war,waw.\n- accumulate_ops: if set to same_op, the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation. If set to same_op_no_op, then the implementation will assume that all concurrent accumulate calls to the same target address will use the same operation or MPI_NO_OP. This can eliminate the need to protect access for certain operation types where the hardware can guarantee atomicity. The default is same_op_no_op.\n- same_size: if set to true, then the implementation may assume that the argument size is identical on all processes, and that all processes have provided this info key with the same value.\n- same_disp_unit: if set to true, then the implementation may assume that the argument displacement_unit is identical on all processes, and that all processes have provided this info key with the same value.",
                    "Type":"INTEGER",
                    "Optional":false
                },
                {
                    "Name":"communicator",
                    "Description":"The communicator containing all MPI processes involved in RMA communications. The various processes in the corresponding group may specify completely different target windows, in location, size, displacement units and info arguments. As long as all the get, put and accumulate accesses to a particular process fit their specific target window this should pose no problem. The same area in memory may appear in multiple windows, each associated with a different window object. However, concurrent communications to distinct, overlapping windows may lead to undefined results. Also, the MPI processes in this communicator must be able to create a memory segment that can be shared with all other MPI processes in the group.",
                    "Type":"INTEGER",
                    "Optional":false
                },
                {
                    "Name":"base",
                    "Description":"The address of locally allocated window segment.",
                    "Type":"INTEGER(KIND=MPI_ADDRESS_KIND)",
                    "Optional":false
                },
                {
                    "Name":"window",
                    "Description":"The variable in which store the window created.",
                    "Type":"INTEGER",
                    "Optional":false
                },
                {
                    "Name":"ierror",
                    "Description":"The error code returned during the window creation:\n- MPI_SUCCESS: the routine successfully completed.",
                    "Type":"INTEGER",
                    "Optional":false
                }
            ]
        }
    ]
}